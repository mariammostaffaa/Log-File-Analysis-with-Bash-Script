#!/bin/bash

# Check if log file is provided
if [ $# -eq 0 ]; then
    echo "Usage: $0 <log_file>"
    exit 1
fi

LOG_FILE=$1
REPORT_FILE="log_analysis_report_$(date +%Y%m%d).txt"

if [ ! -f "$LOG_FILE" ]; then
    echo "Error: File $LOG_FILE not found!"
    exit 1
fi

total_requests=$(wc -l < "$LOG_FILE")
get_requests=$(grep -c 'GET' "$LOG_FILE")
post_requests=$(grep -c 'POST' "$LOG_FILE")

unique_ips=$(awk '{print $1}' "$LOG_FILE" | sort -u | wc -l)
ip_method_counts=$(awk '{print $1,$6}' "$LOG_FILE" | sort | uniq -c | sort -nr)

failed_requests=$(awk '$9 ~ /^[45][0-9][0-9]$/' "$LOG_FILE" | wc -l)
failure_percentage=$(awk "BEGIN {printf \"%.2f\", ($failed_requests/$total_requests)*100}")

top_ip=$(awk '{print $1}' "$LOG_FILE" | sort | uniq -c | sort -nr | head -n 1)

daily_requests=$(awk -F'[' '{print $2}' "$LOG_FILE" | awk '{print $1}' | sort | uniq -c)
total_days=$(echo "$daily_requests" | wc -l)
avg_daily=$(awk "BEGIN {printf \"%.2f\", $total_requests/$total_days}")

failure_days=$(awk '$9 ~ /^[45][0-9][0-9]$/' "$LOG_FILE" | awk -F'[' '{print $2}' | awk '{print $1}' | sort | uniq -c | sort -nr)

hourly_requests=$(awk -F'[:[]' '{print $3}' "$LOG_FILE" | awk -F: '{print $1}' | sort | uniq -c)
status_codes=$(awk '{print $9}' "$LOG_FILE" | sort | uniq -c | sort -nr)
top_get_user=$(awk '$6 == "\"GET" {print $1}' "$LOG_FILE" | sort | uniq -c | sort -nr | head -n 1)
top_post_user=$(awk '$6 == "\"POST" {print $1}' "$LOG_FILE" | sort | uniq -c | sort -nr | head -n 1)
failure_hours=$(awk '$9 ~ /^[45][0-9][0-9]$/' "$LOG_FILE" | awk -F'[:[]' '{print $3}' | awk -F: '{print $1}' | sort | uniq -c | sort -nr)


{
    echo "=== LOG ANALYSIS REPORT ==="
    echo "Generated on: $(date)"
    echo "Analyzed file: $LOG_FILE"
    echo ""
    
    echo "1. REQUEST COUNTS"
    echo "   Total requests: $total_requests"
    echo "   GET requests: $get_requests"
    echo "   POST requests: $post_requests"
    echo ""
    
    echo "2. UNIQUE IP ADDRESSES"
    echo "   Total unique IPs: $unique_ips"
    echo "   Requests per IP and method:"
    echo "$ip_method_counts"
    echo ""
    
    echo "3. FAILURE REQUESTS"
    echo "   Failed requests (4xx/5xx): $failed_requests"
    echo "   Failure percentage: $failure_percentage%"
    echo ""
    
    echo "4. TOP USER"
    echo "   Most active IP: $top_ip"
    echo ""
    
    echo "5. DAILY REQUEST AVERAGES"
    echo "   Average requests per day: $avg_daily"
    echo "   Daily request counts:"
    echo "$daily_requests"
    echo ""
    
    echo "6. FAILURE ANALYSIS"
    echo "   Days with most failures:"
    echo "$failure_days"
    echo ""
    
    echo "ADDITIONAL METRICS"
    echo "a. Hourly request distribution:"
    echo "$hourly_requests"
    echo ""
    echo "b. Status code breakdown:"
    echo "$status_codes"
    echo ""
    echo "c. Most active users by method:"
    echo "   Top GET user: $top_get_user"
    echo "   Top POST user: $top_post_user"
    echo ""
    echo "d. Failure patterns by hour:"
    echo "$failure_hours"
    echo ""
    
    echo "ANALYSIS SUGGESTIONS"
    echo "1. Failure reduction:"
    if [ "$failed_requests" -gt 0 ]; then
        echo "   - Investigate top error codes: $(echo "$status_codes" | grep -E ' 4[0-9]{2}| 5[0-9]{2}' | head -n 3 | awk '{print $2}' | tr '\n' ', ' | sed 's/, $//')"
        echo "   - Focus on peak failure hours: $(echo "$failure_hours" | head -n 3 | awk '{print $2":00 ("$1" failures)"}' | tr '\n' ', ' | sed 's/, $//')"
    else
        echo "   - No failed requests detected"
    fi
    
    peak_hour=$(echo "$hourly_requests" | sort -nr | head -n 1 | awk '{print $2}')
    peak_count=$(echo "$hourly_requests" | sort -nr | head -n 1 | awk '{print $1}')
    echo ""
    echo "2. Performance optimization:"
    echo "   - Highest traffic hour: $peak_hour:00 ($peak_count requests)"
    echo "   - Consider load balancing or caching during peak times"
    
    echo ""
    echo "3. Security recommendations:"
    echo "   - Review activity from top POST user ($top_post_user)"
    echo "   - Check for brute force patterns (many rapid failures from single IP)"
    echo "   - Monitor suspicious user agents or unusual request patterns"
    
} > "$REPORT_FILE"

echo "Analysis complete! Report saved to $REPORT_FILE"